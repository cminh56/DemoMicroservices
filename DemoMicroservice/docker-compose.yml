version: '3.8'

services:
  # Database services
  product-db:
    image: postgres:latest
    container_name: product-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: productdb
    ports:
      - "5432:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
    networks:
      - demomicroservice-network

  order-db:
    image: postgres:latest
    container_name: order-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"
    volumes:
      - order_data:/var/lib/postgresql/data
    networks:
      - demomicroservice-network

  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventorydb
    ports:
      - "5434:5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data
    networks:
      - demomicroservice-network

  catalog-db:
    image: postgres:latest
    container_name: catalog-db
    environment:
      POSTGRES_DB: catalogdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - catalog-db-data:/var/lib/postgresql/data
    networks:
      - demomicroservice-network

  pgadmin-new:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-new
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5051:80"
    depends_on:
      - catalog-db
      - product-db
      - order-db
      - inventory-db
    networks:
      - demomicroservice-network

  # API Services
  product-api:
    container_name: product-api
    build:
      context: .
      dockerfile: Product_API/Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      - product-db
    networks:
      - demomicroservice-network

  inventory-api:
    container_name: inventory-api
    build:
      context: .
      dockerfile: Inventory_API/Dockerfile
    ports:
      - "5002:5002"  # HTTP/1.1
      - "5006:5006"  # gRPC
    depends_on:
      - inventory-db
    networks:
      - demomicroservice-network

  order-api:
    container_name: order-api
    build:
      context: .
      dockerfile: Order_API/Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      - order-db
      - inventory-api
      - rabbitmq
    networks:
      - demomicroservice-network

  # API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - product-api
      - order-api
      - inventory-api
    networks:
      - demomicroservice-network

  # Redis Cache
  basket-redis:
    image: redis:alpine
    container_name: basket-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - demomicroservice-network

  basket-api:
    container_name: basket-api
    build:
      context: .
      dockerfile: Basket_API/Dockerfile
    ports:
      - "5004:5004"
    depends_on:
      - basket-redis
    networks:
      - demomicroservice-network

  catalog-api:
    container_name: catalog-api
    build:
      context: .
      dockerfile: Catalog_API/Dockerfile
    ports:
      - "5005:5005"
    depends_on:
      - catalog-db
    networks:
      - demomicroservice-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - demomicroservice-network

networks:
  demomicroservice-network:
    driver: bridge

volumes:
  product_data:
  order_data:
  inventory_data:
  catalog-db-data:
  redis_data:
  rabbitmq_data:
